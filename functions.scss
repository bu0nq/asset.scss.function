@use 'sass:math';

@function fluid(
  $min-size,
  $max-size,
  $min-breakpoint,
  $max-breakpoint,
  $unit: vw
) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: $slope * 100;
  $intercept: $min-size - $slope * $min-breakpoint;
  $min-size: $min-size;
  $max-size: $max-size;

  @return clamp(#{$min-size}, #{$slope-to-unit}#{$unit} + #{$intercept}, #{$max-size});
}

@function fluid-text(
  $min-size,
  $max-size,
  $min-breakpoint,
  $max-breakpoint,
  $unit: vw
) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: round($slope * 100, 2);

  $intercept: round(from-px-to-rem($min-size - $slope * $min-breakpoint), 2);
  $min-size: round(from-px-to-rem($min-size), 2);
  $max-size: round(from-px-to-rem($max-size), 2);

  @return clamp(#{$min-size}, #{$slope-to-unit}#{$unit} + #{$intercept}, #{$max-size});
}

@function from-px-to-em(
  $size,
  $size-default: 16
) {
  @if (math.is-unitless($size)) {
    $size: $size * 1px;
  }

  @if (math.is-unitless($size-default)) {
    $size-default: $size-default * 1px;
  }

  @return math.div($size, $size-default) * 1em;
}

@function from-px-to-rem(
  $size,
  $size-default: 16
) {
  @if (math.is-unitless($size)) {
    $size: $size * 1px;
  }

  @if (math.is-unitless($size-default)) {
    $size-default: $size-default * 1px;
  }

  @return math.div($size, $size-default) * 1rem;
}

@function round(
  $num,
  $decimals: 0
) {
  $n: 1;

  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }

  @return math.div(math.round($num * $n), $n);
}
